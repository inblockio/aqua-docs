"use strict";(self.webpackChunkaqua_docs_v_2=self.webpackChunkaqua_docs_v_2||[]).push([[7346],{8453:(e,i,n)=>{n.d(i,{R:()=>t,x:()=>l});var r=n(6540);const s={},a=r.createContext(s);function t(e){const i=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),r.createElement(a.Provider,{value:i},e.children)}},9543:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"sdk/api/verification","title":"Verification API Reference","description":"The Aqua Protocol SDK provides comprehensive verification capabilities for validating file authenticity, signatures, and witness proofs.","source":"@site/versioned_docs/version-1.3.2/sdk/api/verification.md","sourceDirName":"sdk/api","slug":"/sdk/api/verification","permalink":"/docs/v3/sdk/api/verification","draft":false,"unlisted":false,"editUrl":"https://github.com/inblockio/versioned_docs/version-1.3.2/sdk/api/verification.md","tags":[],"version":"1.3.2","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Signing","permalink":"/docs/v3/sdk/api/signing"},"next":{"title":"Witnessing","permalink":"/docs/v3/sdk/api/witnessing"}}');var s=n(4848),a=n(8453);const t={},l="Verification API Reference",c={},o=[{value:"Basic Verification",id:"basic-verification",level:2},{value:"Using Chainable API",id:"using-chainable-api",level:3},{value:"Using Standard API",id:"using-standard-api",level:3},{value:"Verification Types",id:"verification-types",level:2},{value:"1. Tree Structure Verification",id:"1-tree-structure-verification",level:3},{value:"2. Revision Verification",id:"2-revision-verification",level:3},{value:"3. Graph Data Verification",id:"3-graph-data-verification",level:3},{value:"Verification Components",id:"verification-components",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Graph Data Structure",id:"graph-data-structure",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Common Issues",id:"common-issues",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2}];function d(e){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"verification-api-reference",children:"Verification API Reference"})}),"\n",(0,s.jsx)(i.p,{children:"The Aqua Protocol SDK provides comprehensive verification capabilities for validating file authenticity, signatures, and witness proofs."}),"\n",(0,s.jsx)(i.h2,{id:"basic-verification",children:"Basic Verification"}),"\n",(0,s.jsx)(i.h3,{id:"using-chainable-api",children:"Using Chainable API"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-typescript",children:'// Verify after any operation\nconst result = await aqua\n  .notarize(file)\n  .sign("metamask", credentials)\n  .witness("eth", "sepolia", "metamask", credentials)\n  .verify();\n\n// Check verification result\nif (result.getVerificationValue().isOk()) {\n  console.log("Verification successful");\n} else {\n  console.error("Verification failed:", result.getLogs());\n}\n'})}),"\n",(0,s.jsx)(i.h3,{id:"using-standard-api",children:"Using Standard API"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-typescript",children:'const verified = await aquafier.verifyAquaTree(\n  tree,\n  [fileObject]\n);\n\nif (verified.isOk()) {\n  console.log("Tree verified successfully");\n} else {\n  console.error("Verification failed:", verified.data);\n}\n'})}),"\n",(0,s.jsx)(i.h2,{id:"verification-types",children:"Verification Types"}),"\n",(0,s.jsx)(i.h3,{id:"1-tree-structure-verification",children:"1. Tree Structure Verification"}),"\n",(0,s.jsx)(i.p,{children:"Verifies the integrity of the Aqua Tree structure:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"File index validation"}),"\n",(0,s.jsx)(i.li,{children:"Hash chain verification"}),"\n",(0,s.jsx)(i.li,{children:"Revision order checking"}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-typescript",children:"const result = await aquafier.verifyAquaTree(tree, [fileObject]);\n"})}),"\n",(0,s.jsx)(i.h3,{id:"2-revision-verification",children:"2. Revision Verification"}),"\n",(0,s.jsx)(i.p,{children:"Verifies specific revisions within the tree:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-typescript",children:"const result = await aquafier.verifyAquaTreeRevision(\n  tree,\n  revision,\n  revisionItemHash,\n  [fileObject]\n);\n"})}),"\n",(0,s.jsx)(i.h3,{id:"3-graph-data-verification",children:"3. Graph Data Verification"}),"\n",(0,s.jsx)(i.p,{children:"Generates and verifies graph data for visualization:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-typescript",children:"// Full tree verification with graph data\nconst graphData = await aquafier.verifyAndGetGraphData(\n  tree,\n  [fileObject]\n);\n\n// Single revision verification with graph data\nconst revisionGraph = await aquafier.verifyAndGetGraphDataRevision(\n  tree,\n  revision,\n  revisionItemHash,\n  [fileObject]\n);\n"})}),"\n",(0,s.jsx)(i.h2,{id:"verification-components",children:"Verification Components"}),"\n",(0,s.jsx)(i.p,{children:"The verification process checks multiple aspects:"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"File Verification"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Hash validation"}),"\n",(0,s.jsx)(i.li,{children:"Content integrity"}),"\n",(0,s.jsx)(i.li,{children:"Metadata matching"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Signature Verification"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Signer authentication"}),"\n",(0,s.jsx)(i.li,{children:"Message format validation"}),"\n",(0,s.jsx)(i.li,{children:"Public key recovery"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Witness Verification"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Proof validation"}),"\n",(0,s.jsx)(i.li,{children:"Timestamp verification"}),"\n",(0,s.jsxs)(i.li,{children:["Platform-specific checks:","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Ethereum: Transaction verification"}),"\n",(0,s.jsx)(i.li,{children:"Nostr: Event verification"}),"\n",(0,s.jsx)(i.li,{children:"TSA: Timestamp validation"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-typescript",children:'try {\n  const result = await aqua.verify();\n  \n  if (result.getVerificationValue().isOk()) {\n    const tree = result.getValue();\n    console.log("Verification successful:", tree);\n  } else {\n    const logs = result.getLogs();\n    console.error("Verification failed:", logs);\n  }\n} catch (error) {\n  console.error("Verification error:", error);\n}\n'})}),"\n",(0,s.jsx)(i.h2,{id:"graph-data-structure",children:"Graph Data Structure"}),"\n",(0,s.jsx)(i.p,{children:"The verification graph data provides a visual representation of the verification state:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-typescript",children:'interface VerificationGraphData {\n  nodes: {\n    id: string;\n    label: string;\n    type: string;\n    status: "verified" | "failed" | "pending";\n  }[];\n  edges: {\n    from: string;\n    to: string;\n    label: string;\n  }[];\n}\n'})}),"\n",(0,s.jsx)(i.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.strong,{children:"Regular Verification"})}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-typescript",children:"// Verify after each major operation\nawait aqua\n  .notarize(file)\n  .verify()  // After notarization\n  .sign(...)\n  .verify()  // After signing\n  .witness(...)\n  .verify(); // After witnessing\n"})}),"\n",(0,s.jsxs)(i.ol,{start:"2",children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.strong,{children:"Comprehensive Verification"})}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-typescript",children:"// Include all relevant file objects\nconst allFiles = [mainFile, ...linkedFiles];\nawait aqua.verify(allFiles);\n"})}),"\n",(0,s.jsxs)(i.ol,{start:"3",children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.strong,{children:"Error Analysis"})}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-typescript",children:'const result = await aqua.verify();\nconst logs = result.getLogs();\n\n// Analyze verification failures\nconst failures = logs.filter(log => \n  log.type === "verification_failure"\n);\n\n// Check specific components\nconst signatureIssues = logs.filter(log => \n  log.component === "signature"\n);\n'})}),"\n",(0,s.jsxs)(i.ol,{start:"4",children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.strong,{children:"Graph Data Usage"})}),"\n"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-typescript",children:'const graphData = await aquafier.verifyAndGetGraphData(\n  tree,\n  [fileObject]\n);\n\n// Analyze verification path\nconst failedNodes = graphData.nodes.filter(node => \n  node.status === "failed"\n);\n'})}),"\n",(0,s.jsx)(i.h2,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"File Hash Mismatch"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Verify file content hasn't changed"}),"\n",(0,s.jsx)(i.li,{children:"Check hash calculation method"}),"\n",(0,s.jsx)(i.li,{children:"Validate file encoding"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Signature Verification Failure"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Check signer address"}),"\n",(0,s.jsx)(i.li,{children:"Verify message format"}),"\n",(0,s.jsx)(i.li,{children:"Validate signature data"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Witness Proof Issues"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Verify blockchain transaction"}),"\n",(0,s.jsx)(i.li,{children:"Check Nostr event existence"}),"\n",(0,s.jsx)(i.li,{children:"Validate TSA timestamp"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Tree Structure Issues"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Check revision order"}),"\n",(0,s.jsx)(i.li,{children:"Verify hash chain"}),"\n",(0,s.jsx)(i.li,{children:"Validate file indices"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Batch Verification"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Group related verifications"}),"\n",(0,s.jsx)(i.li,{children:"Cache verification results"}),"\n",(0,s.jsx)(i.li,{children:"Reuse file objects"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Graph Data Optimization"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Request graph data only when needed"}),"\n",(0,s.jsx)(i.li,{children:"Cache graph representations"}),"\n",(0,s.jsx)(i.li,{children:"Limit verification depth"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Error Recovery"})}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Implement retry logic"}),"\n",(0,s.jsx)(i.li,{children:"Cache intermediate results"}),"\n",(0,s.jsx)(i.li,{children:"Log verification steps"}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);