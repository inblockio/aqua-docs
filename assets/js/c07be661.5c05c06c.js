"use strict";(self.webpackChunkaqua_docs_v_2=self.webpackChunkaqua_docs_v_2||[]).push([[1639],{8453:(n,e,i)=>{i.d(e,{R:()=>t,x:()=>l});var s=i(6540);const r={},a=s.createContext(r);function t(n){const e=s.useContext(a);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:t(n.components),s.createElement(a.Provider,{value:e},n.children)}},9076:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"sdk/api/signing","title":"Signing API Reference","description":"The Aqua Protocol SDK provides three distinct signing methods to accommodate different use cases and environments.","source":"@site/versioned_docs/version-1.3.2/sdk/api/signing.md","sourceDirName":"sdk/api","slug":"/sdk/api/signing","permalink":"/docs/v3/sdk/api/signing","draft":false,"unlisted":false,"editUrl":"https://github.com/inblockio/versioned_docs/version-1.3.2/sdk/api/signing.md","tags":[],"version":"1.3.2","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Core Concepts","permalink":"/docs/v3/sdk/core-concepts"},"next":{"title":"Verification","permalink":"/docs/v3/sdk/api/verification"}}');var r=i(4848),a=i(8453);const t={},l="Signing API Reference",c={},d=[{value:"Signature Types",id:"signature-types",level:2},{value:"1. CLI Signing",id:"1-cli-signing",level:3},{value:"2. DID Signing (Decentralized Identifier)",id:"2-did-signing-decentralized-identifier",level:3},{value:"3. MetaMask Signing",id:"3-metamask-signing",level:3},{value:"Batch Signing",id:"batch-signing",level:2},{value:"Message Format",id:"message-format",level:2},{value:"Signature Verification",id:"signature-verification",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Common Issues",id:"common-issues",level:2},{value:"Security Considerations",id:"security-considerations",level:2}];function o(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"signing-api-reference",children:"Signing API Reference"})}),"\n",(0,r.jsx)(e.p,{children:"The Aqua Protocol SDK provides three distinct signing methods to accommodate different use cases and environments."}),"\n",(0,r.jsx)(e.h2,{id:"signature-types",children:"Signature Types"}),"\n",(0,r.jsx)(e.h3,{id:"1-cli-signing",children:"1. CLI Signing"}),"\n",(0,r.jsx)(e.p,{children:"Uses ethers.js HDNodeWallet for secure command-line signing."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:'// Using Chainable API\nawait aqua.sign(\n  "cli",           // signType\n  credentials      // credentials object\n);\n\n// Using Standard API\nawait aquafier.signAquaTree(\n  tree,\n  "cli",\n  credentials\n);\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Features:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Direct signing process"}),"\n",(0,r.jsx)(e.li,{children:"Suitable for automation"}),"\n",(0,r.jsx)(e.li,{children:"Server-side signing"}),"\n",(0,r.jsx)(e.li,{children:"HDNodeWallet integration"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Configuration:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:'const credentials = {\n  mnemonic: "your-mnemonic-phrase"\n};\n'})}),"\n",(0,r.jsx)(e.h3,{id:"2-did-signing-decentralized-identifier",children:"2. DID Signing (Decentralized Identifier)"}),"\n",(0,r.jsx)(e.p,{children:"Uses key-did-provider-ed25519 for DID-based signing."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:'// Using Chainable API\nawait aqua.sign(\n  "did",           // signType\n  credentials      // credentials object\n);\n\n// Using Standard API\nawait aquafier.signAquaTree(\n  tree,\n  "did",\n  credentials\n);\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Features:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Ed25519 signatures"}),"\n",(0,r.jsx)(e.li,{children:"DID verification"}),"\n",(0,r.jsx)(e.li,{children:"JWS handling"}),"\n",(0,r.jsx)(e.li,{children:"key-did-resolver support"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Configuration:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:'const credentials = {\n  did_key: "your-did-key"\n};\n'})}),"\n",(0,r.jsx)(e.h3,{id:"3-metamask-signing",children:"3. MetaMask Signing"}),"\n",(0,r.jsx)(e.p,{children:"Provides browser and Node.js MetaMask integration."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:'// Using Chainable API\nawait aqua.sign(\n  "metamask",      // signType\n  credentials      // credentials object\n);\n\n// Using Standard API\nawait aquafier.signAquaTree(\n  tree,\n  "metamask",\n  credentials\n);\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Features:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Browser integration"}),"\n",(0,r.jsx)(e.li,{children:"Node.js support via local server"}),"\n",(0,r.jsx)(e.li,{children:"Environment detection"}),"\n",(0,r.jsx)(e.li,{children:"Public key recovery"}),"\n",(0,r.jsx)(e.li,{children:"Signature verification"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"batch-signing",children:"Batch Signing"}),"\n",(0,r.jsx)(e.p,{children:"For signing multiple trees at once:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:'// Using Chainable API\nconst trees = [tree1, tree2, tree3].map(tree => \n  new AquafierChainable(tree)\n    .sign("metamask", credentials)\n);\n\n// Using Standard API\nconst result = await aquafier.signMultipleAquaTrees(\n  trees,\n  "metamask",\n  credentials\n);\n'})}),"\n",(0,r.jsx)(e.h2,{id:"message-format",children:"Message Format"}),"\n",(0,r.jsx)(e.p,{children:"All signing methods use a standardized message format:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"const message = `I sign this revision: ${hash}`;\n"})}),"\n",(0,r.jsx)(e.h2,{id:"signature-verification",children:"Signature Verification"}),"\n",(0,r.jsx)(e.p,{children:"You can verify signatures after signing:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:'// Using Chainable API\nconst result = await aqua\n  .sign("metamask", credentials)\n  .verify();\n\n// Using Standard API\nconst verified = await aquafier.verifyAquaTree(\n  signedTree,\n  [fileObject]\n);\n\n// Recover signer\'s address (MetaMask only)\nconst address = await recoverWalletAddress(signature, message);\n'})}),"\n",(0,r.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Choose the Right Method:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Use CLI for automation and scripts"}),"\n",(0,r.jsx)(e.li,{children:"Use MetaMask for interactive applications"}),"\n",(0,r.jsx)(e.li,{children:"Use DID for decentralized identity integration"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Error Handling:"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:'try {\n  await aqua.sign("metamask", credentials);\n} catch (error) {\n  console.error("Signing failed:", error);\n  const logs = aqua.getLogs();\n  // Handle failure\n}\n'})}),"\n",(0,r.jsxs)(e.ol,{start:"3",children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"MetaMask Environment:"})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:'// Browser\nawait aqua.sign("metamask", credentials);\n\n// Node.js (starts local server)\nawait aqua.sign("metamask", {\n  ...credentials,\n  port: 8545,  // Optional server port\n  host: "localhost"  // Optional server host\n});\n'})}),"\n",(0,r.jsxs)(e.ol,{start:"4",children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.strong,{children:"Verify After Signing:"})}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:'const result = await aqua\n  .sign("metamask", credentials)\n  .verify();\n\nif (result.getVerificationValue().isOk()) {\n  console.log("Signature verified successfully");\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"common-issues",children:"Common Issues"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"MetaMask Connection:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Check wallet connection"}),"\n",(0,r.jsx)(e.li,{children:"Verify account access"}),"\n",(0,r.jsx)(e.li,{children:"Handle user rejections"}),"\n",(0,r.jsx)(e.li,{children:"Monitor connection state"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"DID Signing:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Validate DID format"}),"\n",(0,r.jsx)(e.li,{children:"Check key permissions"}),"\n",(0,r.jsx)(e.li,{children:"Handle resolver errors"}),"\n",(0,r.jsx)(e.li,{children:"Verify JWS format"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"CLI Signing:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Verify mnemonic format"}),"\n",(0,r.jsx)(e.li,{children:"Check wallet derivation"}),"\n",(0,r.jsx)(e.li,{children:"Handle key generation errors"}),"\n",(0,r.jsx)(e.li,{children:"Monitor signing process"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Private Key Management:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Never expose private keys in code"}),"\n",(0,r.jsx)(e.li,{children:"Use secure key storage"}),"\n",(0,r.jsx)(e.li,{children:"Implement key rotation"}),"\n",(0,r.jsx)(e.li,{children:"Monitor for unauthorized use"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Signature Verification:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Always verify signatures"}),"\n",(0,r.jsx)(e.li,{children:"Check signer addresses"}),"\n",(0,r.jsx)(e.li,{children:"Validate message format"}),"\n",(0,r.jsx)(e.li,{children:"Monitor for replay attacks"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Environment Security:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Secure MetaMask connections"}),"\n",(0,r.jsx)(e.li,{children:"Protect mnemonic phrases"}),"\n",(0,r.jsx)(e.li,{children:"Secure DID keys"}),"\n",(0,r.jsx)(e.li,{children:"Monitor signing requests"}),"\n"]}),"\n"]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(o,{...n})}):o(n)}}}]);