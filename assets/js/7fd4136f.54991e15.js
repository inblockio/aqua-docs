"use strict";(self.webpackChunkaqua_docs_v_2=self.webpackChunkaqua_docs_v_2||[]).push([[1020],{4548:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"sdk/getting-started","title":"Getting Started with Aqua Protocol SDK","description":"Installation","source":"@site/versioned_docs/version-1.3.2/sdk/getting-started.md","sourceDirName":"sdk","slug":"/sdk/getting-started","permalink":"/docs/v3/sdk/getting-started","draft":false,"unlisted":false,"editUrl":"https://github.com/inblockio/versioned_docs/version-1.3.2/sdk/getting-started.md","tags":[],"version":"1.3.2","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"CLI Tool","permalink":"/docs/v3/cli-tool"},"next":{"title":"Core Concepts","permalink":"/docs/v3/sdk/core-concepts"}}');var i=t(4848),a=t(8453);const r={},o="Getting Started with Aqua Protocol SDK",c={},l=[{value:"Installation",id:"installation",level:2},{value:"Basic Concepts",id:"basic-concepts",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Using the Chainable API (Recommended)",id:"using-the-chainable-api-recommended",level:3},{value:"Using the Standard API",id:"using-the-standard-api",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"getting-started-with-aqua-protocol-sdk",children:"Getting Started with Aqua Protocol SDK"})}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"npm install aqua-js-sdk\n"})}),"\n",(0,i.jsx)(n.h2,{id:"basic-concepts",children:"Basic Concepts"}),"\n",(0,i.jsx)(n.p,{children:"The Aqua Protocol SDK provides a system for file notarization and verification using three main operations:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Notarization"}),": Creating a genesis revision for your file"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Signing"}),": Adding cryptographic signatures using various methods"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Witnessing"}),": Recording the file state on different platforms"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Verification"}),": Validating the authenticity of files"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,i.jsx)(n.h3,{id:"using-the-chainable-api-recommended",children:"Using the Chainable API (Recommended)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { AquafierChainable } from \'aqua-js-sdk\';\n\n// Prepare your file object\nconst fileObject = {\n  name: "document.pdf",\n  hash: "0x...", // File hash\n  content: "..." // Optional file content\n};\n\n// Create credentials (example for MetaMask)\nconst credentials = {\n  mnemonic: "",      // For CLI signing\n  nostr_sk: "",      // For Nostr witnessing\n  did_key: "",       // For DID signing\n  alchemy_key: "",   // For Ethereum operations\n  witness_eth_network: "sepolia",\n  witness_method: "metamask"\n};\n\n// Create and process your file\nconst aqua = new AquafierChainable(null);\nconst result = await aqua\n  .notarize(fileObject)\n  .sign("metamask", credentials)\n  .witness("eth", "sepolia", "metamask", credentials)\n  .verify();\n\n// Get results\nconst tree = result.getValue();\nconst logs = result.getLogs();\n'})}),"\n",(0,i.jsx)(n.h3,{id:"using-the-standard-api",children:"Using the Standard API"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { Aquafier } from \'aqua-js-sdk\';\n\nconst aqua = new Aquafier();\n\n// Create genesis revision\nconst genesis = await aqua.createGenesisRevision(fileObject);\n\n// Sign the tree\nconst signed = await aqua.signAquaTree(genesis.data.aquaTree, "metamask", credentials);\n\n// Witness the tree\nconst witnessed = await aqua.witnessAquaTree(\n  signed.data.aquaTree,\n  "eth",\n  "sepolia",\n  "metamask",\n  credentials\n);\n\n// Verify the tree\nconst verified = await aqua.verifyAquaTree(witnessed.data.aquaTree, [fileObject]);\n'})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Read about ",(0,i.jsx)(n.a,{href:"/docs/v3/sdk/core-concepts",children:"Core Concepts"})," to understand the system better"]}),"\n",(0,i.jsxs)(n.li,{children:["Check out ",(0,i.jsx)(n.a,{href:"./use-cases.md",children:"Common Use Cases"})," for practical examples"]}),"\n",(0,i.jsxs)(n.li,{children:["Review the ",(0,i.jsx)(n.a,{href:"./api/aquafier.md",children:"API Reference"})," for detailed documentation"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(6540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);