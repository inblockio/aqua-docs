"use strict";(self.webpackChunkaqua_docs_v_2=self.webpackChunkaqua_docs_v_2||[]).push([[7975],{2598:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"1.3.2","label":"v3","banner":null,"badge":true,"noIndex":false,"className":"docs-version-1.3.2","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/docs/v3/intro","docId":"intro","unlisted":false},{"type":"link","label":"Schema Reference","href":"/docs/v3/schema_2","docId":"schema_2","unlisted":false},{"type":"link","label":"Verifier Tests","href":"/docs/v3/VerifierTests","docId":"VerifierTests","unlisted":false},{"type":"link","label":"REST API","href":"/docs/v3/RestAPI","docId":"RestAPI","unlisted":false},{"type":"link","label":"Aqua Identity","href":"/docs/v3/AquaIdentity","docId":"AquaIdentity","unlisted":false}]},"docs":{"AquaIdentity":{"id":"AquaIdentity","title":"AquaIdentity","description":"Aqua Identity leverages the Aqua Protocol to deliver trusted identity claims and attestations within a secure, decentralized framework. Operating as a layer-two application, it builds upon the foundational verifications completed at layer one, ensuring a robust and reliable identity management system. For an Aqua Identity to be considered valid, all prerequisite atomic and relational verification checks must be successfully completed prior to its issuance. Atomic verification refers to the validation of a single revision\u2019s content, ensuring all required checks (e.g., data integrity, format compliance) are met. Relational verification examines the relationships between revisions, confirming plausibility of timestamps, consistency of revision hashes (e.g., matching the expected previousverificationhash), and availability of linked resources.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Aqua Protocol Version 3","description":"Welcome to Aqua: A Cryptographic Trust Protocol for Decentralized Data Integrity","sidebar":"tutorialSidebar"},"RestAPI":{"id":"RestAPI","title":"Rest API","description":"REST API Specification for Aqua-Protocol Version 3","sidebar":"tutorialSidebar"},"schema_2":{"id":"schema_2","title":"Schema (v3.2)","description":"The shema documentation below outlines the five types of revisions (file, content, signature, witness,link and form) and their respective properties.","sidebar":"tutorialSidebar"},"VerifierTests":{"id":"VerifierTests","title":"Verifier Tests","description":"Overview","sidebar":"tutorialSidebar"}}}}')}}]);