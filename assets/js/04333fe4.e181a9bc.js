"use strict";(self.webpackChunkaqua_docs_v_2=self.webpackChunkaqua_docs_v_2||[]).push([[9109],{5494:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>o,default:()=>b,frontMatter:()=>i,metadata:()=>n,toc:()=>f});const n=JSON.parse('{"id":"Aqua-Identity","title":"Aqua Identity","description":"Aqua Identity uses the Aqua-Protocol to provide trusted identity claims and attestations using the Aqua Protocol.","source":"@site/versioned_docs/version-1.3.2/Aqua-Identity.md","sourceDirName":".","slug":"/Aqua-Identity","permalink":"/docs/v3/Aqua-Identity","draft":false,"unlisted":false,"editUrl":"https://github.com/inblockio/versioned_docs/version-1.3.2/Aqua-Identity.md","tags":[],"version":"1.3.2","frontMatter":{"title":"Aqua Identity"}}');var c=t(4848),d=t(8453);const i={title:"Aqua Identity"},o="Aqua Identity",s={},f=[{value:"Self authenticated identity claim",id:"self-authenticated-identity-claim",level:2},{value:"Verification Conditions:",id:"verification-conditions",level:3},{value:"Example:",id:"example",level:2},{value:"Attestation",id:"attestation",level:2},{value:"Verification Conditions:",id:"verification-conditions-1",level:2}];function r(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(a.header,{children:(0,c.jsx)(a.h1,{id:"aqua-identity",children:"Aqua Identity"})}),"\n",(0,c.jsx)(a.p,{children:"Aqua Identity uses the Aqua-Protocol to provide trusted identity claims and attestations using the Aqua Protocol.\nThe Aqua Identity is a layer two application, as it assumes all layer one verification checks have been successfully completed.\nAqua Identity validity checks MUST be done after all atomic verification checks\nand all relational verification checks have been successfully completed."}),"\n",(0,c.jsx)(a.h2,{id:"self-authenticated-identity-claim",children:"Self authenticated identity claim"}),"\n",(0,c.jsx)(a.p,{children:"Are the foundational building blocks to the aqua identity system. Any claim starts with a self authenticated identity claim."}),"\n",(0,c.jsx)(a.h3,{id:"verification-conditions",children:"Verification Conditions:"}),"\n",(0,c.jsx)(a.p,{children:"For an Identity Claim to be valid, it MUST to be signd by the by the claim issuer.\nOnly the owner of the wallet, can issue claims about the wallet."}),"\n",(0,c.jsx)(a.h2,{id:"example",children:"Example:"}),"\n",(0,c.jsx)(a.p,{children:"Example JSON input (dictonary for forms):"}),"\n",(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-json",children:'{\n    "type": "identity_claim",\n    "name": "John",\n    "surname": "Doe",\n    "email": "john.doe@example.com",\n    "date_of_birth": "1995-10-15",\n    "wallet_address": "0x568a94a8f0f3dc0b245b853bef572075c1df5c50"\n}\n'})}),"\n",(0,c.jsx)(a.p,{children:'The JSON is wrapped into an aqua-revision using the "form" type with a tree verification structure.\nThe tree verification structure allows for selective disclosure of attributes.\nAllowing the removal of attributes when presenting the claim to third parties without the ability to verify the remaining datastructure.'}),"\n",(0,c.jsx)(a.p,{children:"The example shows a valid identity claim with multiple attributes."}),"\n",(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-json",children:'"revisions": {\n        "0x5721891d757ee81ab3cd00442293f3808a99e676d2d1bda03cda26bae23daed1": {\n            "previous_verification_hash": "",\n            "local_timestamp": "20250228083859",\n            "revision_type": "form",\n            "file_hash": "e193009bf33316803481ad0dd2aea14ccf489ca261fa403c96f8e054d5ea4659",\n            "file_nonce": "74a3389590e9af459113ad629ec5682b73747291b840e39226b58054a475d3ef",\n            "version": "https://aqua-protocol.org/docs/v3/schema_2 | SHA256 | Method: tree",\n            "forms_type": "identity_claim",\n            "forms_name": "John",\n            "forms_surname": "Doe",\n            "forms_email": "john.doe@example.com",\n            "forms_date_of_birth": "1995-10-15",\n            "forms_wallet_address": "0x568a94a8f0f3dc0b245b853bef572075c1df5c50",\n            "leaves": [\n                "a30b33749a68fb367b267f2f8b44d53a1bfe3aba94b265df98f812a2db1ac60d",\n                "f7f02d3b6bd597c63b423a0bb682e77c9b42b1c27ef777bad47259eaa6d5a45f",\n                "3b5abc4d1a21b05caa891be0650cf25cea133ddb939b1c45a8282bcab686545a",\n                "dcb7cfdf2bae4a7e558e58dc9a26bc2627f35f2097c38b3e1493693ed3495239",\n                "5122dde9b24bdd39f3eb20f64c18e6a960b6a3320c7cfb7707b8e7de581cc7f2",\n                "28d88a09468f136c21475a121b53c626d1c29902a076b7e94c8a77aaa2a45b37",\n                "15a1e4c78fa31877be47fa99afee32bd426d6bf74c5297f0d1d706b987c528bd",\n                "b95b4f6e034884da002c503e2753b4b93c5a9d07a0d9ee13576f0bace9c4649b",\n                "78d7f2378e5160fd5d5e52065467c8c444f20b75e03e0b0d564ee6dc9b7fa7dd",\n                "d781acf7ba880ecae581ffd8debcb4f5cb430bc2f237e27a6098471a9f7ffa60",\n                "43fcaef3dc4b2a2d0550543b638048edcfb710da9276da109a9e011ed1a53ed1",\n                "39ccd407bb105ed3be74df4a546d9b10c4f6c80e48b559102b04fa2b29aa83b4"\n            ]\n        },\n        "0xe5ee04bc1eb8365d8c609cc6afa4dc9c003dd6cd0538797ba458d58a660aedf8": {\n            "previous_verification_hash": "0x5721891d757ee81ab3cd00442293f3808a99e676d2d1bda03cda26bae23daed1",\n            "local_timestamp": "20250228084213",\n            "revision_type": "signature",\n            "signature": "0x8a3055c71bc3fb705add8a82c88e6d7f909a1f53415e1172da66a7d807c517004b84b6df8f8e86d764bb49629ec9d5a34075a959799f9153fb1af0f246d4c2fe1b",\n            "signature_public_key": "0x0380a77a1a6d59be5c10d7ee5e10def79283938bb8a60025d0fe5404e650e8ccc1",\n            "signature_wallet_address": "0x568a94a8f0f3dc0b245b853bef572075c1df5c50",\n            "signature_type": "ethereum:eip-191",\n            "version": "https://aqua-protocol.org/docs/v3/schema_2 | SHA256 | Method: scalar"\n        }\n'})}),"\n",(0,c.jsx)(a.h2,{id:"attestation",children:"Attestation"}),"\n",(0,c.jsx)(a.p,{children:"The input JSON for the aqua form revision:"}),"\n",(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-json",children:'{\n    "type": "identity_attestation",\n    "identity_claim_id": "0x5721891d757ee81ab3cd00442293f3808a99e676d2d1bda03cda26bae23daed1",\n    "name": "John",\n    "surname": "Doe",\n    "email": "john.doe@example.com",\n    "date_of_birth": "1995-10-15",\n    "context": "I verified the attributes against a government issued ID.\n                I hereby attest that the above information is true and correct to the best of my knowledge.",\n    "wallet_address": "0x6b2f22390c318107e95c58c90a66afaf7ef06853"\n}\n'})}),"\n",(0,c.jsx)(a.h2,{id:"verification-conditions-1",children:"Verification Conditions:"}),"\n",(0,c.jsx)(a.p,{children:"The following attributes MUST be present:"}),"\n",(0,c.jsxs)(a.ul,{children:["\n",(0,c.jsx)(a.li,{children:"form_type: identity_attestation"}),"\n",(0,c.jsx)(a.li,{children:"form_identity_claim_id: revision hash of referenced identity claim"}),"\n",(0,c.jsx)(a.li,{children:"form_wallet_address: must be wallet address of the attester"}),"\n",(0,c.jsx)(a.li,{children:"form_context: optional to provide context of the attestation"}),"\n",(0,c.jsx)(a.li,{children:"Must have at least one attribute which is identitcal in key value to the identity_claim it references"}),"\n"]}),"\n",(0,c.jsx)(a.p,{children:"The Aqua revisions form & signature:"}),"\n",(0,c.jsx)(a.pre,{children:(0,c.jsx)(a.code,{className:"language-json",children:'"revisions": {\n        "0xcd5acfd60283091769c765b05add4fe7bfc6471174264af523de96305d367e46": {\n            "previous_verification_hash": "",\n            "local_timestamp": "20250228100501",\n            "revision_type": "form",\n            "file_hash": "2a8f574fa444958c2acfa5ce9652cbe26e3c38271cb130280682a119050565cc",\n            "file_nonce": "4d5be0fffe4ea48a214f93cdc5da3933c252569a6e2d5e557346015219ab4921",\n            "version": "https://aqua-protocol.org/docs/v3/schema_2 | SHA256 | Method: tree",\n            "forms_type": "identity_attestation",\n            "forms_identity_claim_id": "0x5721891d757ee81ab3cd00442293f3808a99e676d2d1bda03cda26bae23daed1",\n            "forms_name": "John",\n            "forms_surname": "Doe",\n            "forms_email": "john.doe@example.com",\n            "forms_date_of_birth": "1995-10-15",\n            "forms_context": "I hereby attest that the above information is true and correct to the best of my knowledge.",\n            "forms_wallet_address": "0x6b2f22390c318107e95c58c90a66afaf7ef06853",\n            "leaves": [\n                "80f38992d148b666addfdee7678aa8b6e6b6babb6b088d58d19e85135c5cd92f",\n                "fadc2c5b6793a43ac3e0c5920b56bbd0cc3dac56fc60b45091a8671e884cbec9",\n                "5890fbf208e5503532c9d4f1cf97cd78d993b42d023187ac02cdc4298a01a197",\n                "3b5abc4d1a21b05caa891be0650cf25cea133ddb939b1c45a8282bcab686545a",\n                "dcb7cfdf2bae4a7e558e58dc9a26bc2627f35f2097c38b3e1493693ed3495239",\n                "a37e968e97736a195db0ca44538174984e34fc10b68aa6d351386ccf8b87470f",\n                "5122dde9b24bdd39f3eb20f64c18e6a960b6a3320c7cfb7707b8e7de581cc7f2",\n                "28d88a09468f136c21475a121b53c626d1c29902a076b7e94c8a77aaa2a45b37",\n                "724b53a739396244b394d8ea53afb014de7c99eb243f5d6d574d154a02c9ba5f",\n                "21e21d483289413fac72228b2005deddc3155cc4850059303f084a05368c4e57",\n                "02f64008e4005ffc43c0270e32e4b3c1c1c8075793aea167923960c59a4300c2",\n                "d781acf7ba880ecae581ffd8debcb4f5cb430bc2f237e27a6098471a9f7ffa60",\n                "43fcaef3dc4b2a2d0550543b638048edcfb710da9276da109a9e011ed1a53ed1",\n                "39ccd407bb105ed3be74df4a546d9b10c4f6c80e48b559102b04fa2b29aa83b4"\n            ]\n        },\n        "0x7be476f6c305187b2410cfff0df8e6eeb4ba53a25b3e389231085d4934c68aec": {\n            "previous_verification_hash": "0xcd5acfd60283091769c765b05add4fe7bfc6471174264af523de96305d367e46",\n            "local_timestamp": "20250228100743",\n            "revision_type": "signature",\n            "signature": "0xb2b51810d7134f969fb48736e6f390d3eadac3b1e9adb5b8ef54c600ae77826971d64a74e01dd0bc1e2a18911ea1e8350733b3f7676866653ae8f0e7645fb7a51b",\n            "signature_public_key": "0x02b027a2f4592f83c1301c1e6629f648a953d791d7c7059b1c46a6a24d9101f4c9",\n            "signature_wallet_address": "0x6b2f22390c318107e95c58c90a66afaf7ef06853",\n            "signature_type": "ethereum:eip-191",\n            "version": "https://aqua-protocol.org/docs/v3/schema_2 | SHA256 | Method: scalar"\n        }\n'})}),"\n",(0,c.jsx)(a.p,{children:"Attesters are in the role, to attest the validity of self authenticted identity claims."}),"\n",(0,c.jsx)(a.p,{children:"Example project:"}),"\n",(0,c.jsx)(a.p,{children:(0,c.jsx)(a.a,{href:"https://github.com/inblockio/aqua-identity",children:"https://github.com/inblockio/aqua-identity"})})]})}function b(e={}){const{wrapper:a}={...(0,d.R)(),...e.components};return a?(0,c.jsx)(a,{...e,children:(0,c.jsx)(r,{...e})}):r(e)}},8453:(e,a,t)=>{t.d(a,{R:()=>i,x:()=>o});var n=t(6540);const c={},d=n.createContext(c);function i(e){const a=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),n.createElement(d.Provider,{value:a},e.children)}}}]);