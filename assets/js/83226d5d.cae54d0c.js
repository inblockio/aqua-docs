"use strict";(self.webpackChunkaqua_docs_v_2=self.webpackChunkaqua_docs_v_2||[]).push([[1041],{8453:(e,i,t)=>{t.d(i,{R:()=>r,x:()=>a});var n=t(6540);const s={},o=n.createContext(s);function r(e){const i=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(o.Provider,{value:i},e.children)}},9028:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"Protocol/immutable-hyperlinks","title":"Immutable Hyperlinks","description":"Shows how the Aqua URI\'s can be used as immutable links.\\n","source":"@site/versioned_docs/version-1.1.0/Protocol/immutable-hyperlinks.md","sourceDirName":"Protocol","slug":"/Protocol/immutable-hyperlinks","permalink":"/docs/v1/Protocol/immutable-hyperlinks","draft":false,"unlisted":false,"editUrl":"https://github.com/inblockio/versioned_docs/version-1.1.0/Protocol/immutable-hyperlinks.md","tags":[],"version":"1.1.0","sidebarPosition":10,"frontMatter":{"title":"Immutable Hyperlinks","linkTitle":"Immutable Hyperlinks","weight":10,"sidebar_position":10,"description":"Shows how the Aqua URI\'s can be used as immutable links.\\n"},"sidebar":"tutorialSidebar","previous":{"title":"Guardian","permalink":"/docs/v1/Protocol/guardian"}}');var s=t(4848),o=t(8453);const r={title:"Immutable Hyperlinks",linkTitle:"Immutable Hyperlinks",weight:10,sidebar_position:10,description:"Shows how the Aqua URI's can be used as immutable links.\n"},a=void 0,l={},h=[{value:"Goal",id:"goal",level:2},{value:"Success Criteria",id:"success-criteria",level:2},{value:"Input",id:"input",level:2},{value:"Boundary conditions",id:"boundary-conditions",level:2},{value:"Implementation",id:"implementation",level:2}];function c(e){const i={a:"a",code:"code",h2:"h2",h6:"h6",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(i.p,{children:["Traditional hyperlinks are usually\n",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/URL",children:"URL's"})," based on the\n",(0,s.jsx)(i.a,{href:"https://en.wikipedia.org/wiki/Domain_Name_System",children:"DNS"})," structure."]}),"\n",(0,s.jsx)(i.p,{children:"This allows the resource to be routed via DNS and specified via the URL\non the remote server."}),"\n",(0,s.jsx)(i.p,{children:"The limitations of URL's is that they are not expressing a specific\nstate of the resource they represent. There is no way to verify if the content\nof the page is consistent with the content of the page who send a URL.\nFor news pages this means that the content of the page could have changed. E.g.\ntwo visitors of the same news page could see two different pages."}),"\n",(0,s.jsx)(i.p,{children:"We need a better way to hyperlink so it's sure, that what is linked\nis consistent across domains and users. Therefore we introduce Aqua URI's which are\nused to enable the receive to verify the state of the resource."}),"\n",(0,s.jsx)(i.h2,{id:"goal",children:"Goal"}),"\n",(0,s.jsx)(i.p,{children:"Use Immutable Hyperlinks as Unique Resource Identifiers (URI's) to allow\na consistent referenciation of resources with the ability to verify them with the AQP."}),"\n",(0,s.jsx)(i.h2,{id:"success-criteria",children:"Success Criteria"}),"\n",(0,s.jsx)(i.p,{children:"A Immutable Hyperlink schema which links to a specific state of a\nresource. Instead of a stateless hyperlink we use verification_hash as a\nURI which acts as the checksum to verify the retrieved revision."}),"\n",(0,s.jsx)(i.h2,{id:"input",children:"Input"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"file upload wizard is executed with file-data and description as\ninput"}),"\n",(0,s.jsx)(i.li,{children:"file is stored with in the service triggering a hook leading to the\ncalculation of"}),"\n",(0,s.jsx)(i.li,{children:"verification_hash (calculated with the file as input for\ncontent_hash) which is stored in the revision_object (file or\ndatabase)"}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"Output"}),"\n",(0,s.jsx)(i.h6,{id:""}),"\n",(0,s.jsx)(i.p,{children:"When linking the file it's displayed in the following format: [SHA3-512\nHash|Descriptor Text]"}),"\n",(0,s.jsx)(i.h2,{id:"boundary-conditions",children:"Boundary conditions"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"File is too big to be hashed. We support currently up to 50 MB."}),"\n",(0,s.jsx)(i.li,{children:"File can't be hashed for some reason (error during the process to\ndue an unexpected code execution)"}),"\n",(0,s.jsx)(i.li,{children:"File is empty (has no content)"}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"implementation",children:"Implementation"}),"\n",(0,s.jsx)(i.p,{children:"We create Immutable Hyperlinks by moving from URL's to sha3-512 hashes as\nURI's. These URI's are globally unique and therefore collision resistant\nas the namespace is sufficiently large. By using the hashes as links we\nalso refer to the state of the resource. As the hash is the\nverification_hash of the resource it allows us to verify the integrity\nof the resource with it."}),"\n",(0,s.jsx)(i.p,{children:"We are referring to files with their SHA3-512 hash in this format\n[SHA3-512|human_readable_filename]. Displayed is the human readable\nfilename white it's stored with the full SHA3-512 hash which allows us\nto be used as Immutable Hyperlinks."}),"\n",(0,s.jsxs)(i.p,{children:["To allow routing between resources we can add the ",(0,s.jsx)(i.code,{children:"<domain_id>"})," as a\nprefix to the ",(0,s.jsx)(i.code,{children:"<verification_hash>"})," resulting in the following syntax:"]}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.code,{children:"example: aqua://<domain_id>/<page_verification_hash>"})}),"\n",(0,s.jsx)(i.p,{children:"Note: Implementatstion specific to aqua-PKC:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"The verification_hash is stored in the content-slot 'transclusion hashes' with the internal links which referne the resource."}),"\n"]})]})}function d(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);