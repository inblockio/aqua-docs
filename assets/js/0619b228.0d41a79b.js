"use strict";(self.webpackChunkaqua_docs_v_2=self.webpackChunkaqua_docs_v_2||[]).push([[1845],{8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>r});var s=i(6540);const a={},t=s.createContext(a);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),s.createElement(t.Provider,{value:n},e.children)}},9612:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"sdk/api/chainable","title":"Chainable API Reference","description":"The AquafierChainable class provides a fluent interface for performing operations on Aqua Trees. It allows you to chain multiple operations while maintaining state and collecting logs.","source":"@site/versioned_docs/version-1.3.2/sdk/api/chainable.md","sourceDirName":"sdk/api","slug":"/sdk/api/chainable","permalink":"/docs/v3/sdk/api/chainable","draft":false,"unlisted":false,"editUrl":"https://github.com/inblockio/versioned_docs/version-1.3.2/sdk/api/chainable.md","tags":[],"version":"1.3.2","frontMatter":{}}');var a=i(4848),t=i(8453);const l={},r="Chainable API Reference",o={},c=[{value:"Quick Example",id:"quick-example",level:2},{value:"Constructor",id:"constructor",level:2},{value:"<code>new AquafierChainable(initialValue?: AquaTree | null)</code>",id:"new-aquafierchainableinitialvalue-aquatree--null",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>notarize(fileObject: FileObject, options?: NotarizeOptions): Promise&lt;this&gt;</code>",id:"notarizefileobject-fileobject-options-notarizeoptions-promisethis",level:3},{value:"<code>sign(signType: SignType, credentials: CredentialsData, enableScalar?: boolean): Promise&lt;this&gt;</code>",id:"signsigntype-signtype-credentials-credentialsdata-enablescalar-boolean-promisethis",level:3},{value:"<code>witness(witnessType: WitnessType, witnessNetwork: WitnessNetwork, witnessPlatform: WitnessPlatformType, credentials: CredentialsData, enableScalar?: boolean): Promise&lt;this&gt;</code>",id:"witnesswitnesstype-witnesstype-witnessnetwork-witnessnetwork-witnessplatform-witnessplatformtype-credentials-credentialsdata-enablescalar-boolean-promisethis",level:3},{value:"<code>verify(linkedFileObject: Array&lt;FileObject&gt; = []): Promise&lt;this&gt;</code>",id:"verifylinkedfileobject-arrayfileobject---promisethis",level:3},{value:"Getters",id:"getters",level:3},{value:"<code>getValue(): AquaTree</code>",id:"getvalue-aquatree",level:4},{value:"<code>getVerificationValue(): Result&lt;AquaOperationData, LogData[]&gt;</code>",id:"getverificationvalue-resultaquaoperationdata-logdata",level:4},{value:"<code>getLogs(): LogData[]</code>",id:"getlogs-logdata",level:4},{value:"Error Handling",id:"error-handling",level:2},{value:"Best Practices",id:"best-practices",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"chainable-api-reference",children:"Chainable API Reference"})}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"AquafierChainable"})," class provides a fluent interface for performing operations on Aqua Trees. It allows you to chain multiple operations while maintaining state and collecting logs."]}),"\n",(0,a.jsx)(n.h2,{id:"quick-example",children:"Quick Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'const aqua = new AquafierChainable(tree)\n  .notarize(file)\n  .sign("metamask", credentials)\n  .witness("eth", "sepolia")\n  .verify();\n'})}),"\n",(0,a.jsx)(n.h2,{id:"constructor",children:"Constructor"}),"\n",(0,a.jsx)(n.h3,{id:"new-aquafierchainableinitialvalue-aquatree--null",children:(0,a.jsx)(n.code,{children:"new AquafierChainable(initialValue?: AquaTree | null)"})}),"\n",(0,a.jsx)(n.p,{children:"Creates a new chainable Aqua operation sequence."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"// Start with no tree\nconst aqua = new AquafierChainable(null);\n\n// Start with existing tree\nconst aqua = new AquafierChainable(existingTree);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,a.jsx)(n.h3,{id:"notarizefileobject-fileobject-options-notarizeoptions-promisethis",children:(0,a.jsx)(n.code,{children:"notarize(fileObject: FileObject, options?: NotarizeOptions): Promise<this>"})}),"\n",(0,a.jsx)(n.p,{children:"Creates a genesis revision for file notarization."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'const fileObject = {\n  name: "document.pdf",\n  hash: "0x...",\n  content: "..." // optional\n};\n\nconst options = {\n  isForm: false,\n  enableContent: false,\n  enableScalar: true\n};\n\nawait aqua.notarize(fileObject, options);\n'})}),"\n",(0,a.jsx)(n.h3,{id:"signsigntype-signtype-credentials-credentialsdata-enablescalar-boolean-promisethis",children:(0,a.jsx)(n.code,{children:"sign(signType: SignType, credentials: CredentialsData, enableScalar?: boolean): Promise<this>"})}),"\n",(0,a.jsx)(n.p,{children:"Signs the current Aqua Tree state."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'const credentials = {\n  mnemonic: "",      // For CLI signing\n  nostr_sk: "",      // For Nostr\n  did_key: "",       // For DID\n  alchemy_key: "",   // For Ethereum\n  witness_eth_network: "",\n  witness_method: ""\n};\n\nawait aqua.sign("metamask", credentials);\n'})}),"\n",(0,a.jsx)(n.p,{children:"Supported sign types:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"cli"'})," - Command-line signing using HDNodeWallet"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"metamask"'})," - Browser or Node.js MetaMask signing"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"did"'})," - Decentralized Identifier signing"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"witnesswitnesstype-witnesstype-witnessnetwork-witnessnetwork-witnessplatform-witnessplatformtype-credentials-credentialsdata-enablescalar-boolean-promisethis",children:(0,a.jsx)(n.code,{children:"witness(witnessType: WitnessType, witnessNetwork: WitnessNetwork, witnessPlatform: WitnessPlatformType, credentials: CredentialsData, enableScalar?: boolean): Promise<this>"})}),"\n",(0,a.jsx)(n.p,{children:"Witnesses the current Aqua Tree state."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'await aqua.witness(\n  "eth",           // witnessType\n  "sepolia",       // witnessNetwork\n  "metamask",      // witnessPlatform\n  credentials,     // credentials object\n  true            // enableScalar\n);\n'})}),"\n",(0,a.jsx)(n.p,{children:"Witness Types:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"eth"'})," - Ethereum blockchain witnessing"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"nostr"'})," - Nostr protocol witnessing"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"tsa"'})," - Time Stamp Authority witnessing"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Networks (for Ethereum):"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:'"mainnet"'})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:'"sepolia"'})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.code,{children:'"goerli"'})}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Platforms:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"metamask"'})," - MetaMask wallet"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"cli"'})," - Command-line interface"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:'"api"'})," - Direct API calls"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"verifylinkedfileobject-arrayfileobject---promisethis",children:(0,a.jsx)(n.code,{children:"verify(linkedFileObject: Array<FileObject> = []): Promise<this>"})}),"\n",(0,a.jsx)(n.p,{children:"Verifies the current Aqua Tree state."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"await aqua.verify([fileObject]);\n"})}),"\n",(0,a.jsx)(n.h3,{id:"getters",children:"Getters"}),"\n",(0,a.jsx)(n.h4,{id:"getvalue-aquatree",children:(0,a.jsx)(n.code,{children:"getValue(): AquaTree"})}),"\n",(0,a.jsx)(n.p,{children:"Gets the current Aqua Tree state."}),"\n",(0,a.jsx)(n.h4,{id:"getverificationvalue-resultaquaoperationdata-logdata",children:(0,a.jsx)(n.code,{children:"getVerificationValue(): Result<AquaOperationData, LogData[]>"})}),"\n",(0,a.jsx)(n.p,{children:"Gets the result of the last verification operation."}),"\n",(0,a.jsx)(n.h4,{id:"getlogs-logdata",children:(0,a.jsx)(n.code,{children:"getLogs(): LogData[]"})}),"\n",(0,a.jsx)(n.p,{children:"Gets all collected operation logs."}),"\n",(0,a.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,a.jsx)(n.p,{children:"The chainable API uses a Result type for error handling. You can check for errors in the logs:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'const aqua = new AquafierChainable(null);\nawait aqua.notarize(fileObject);\n\nconst logs = aqua.getLogs();\nif (logs.length > 0) {\n  console.log("Operation logs:", logs);\n}\n\nconst verificationResult = aqua.getVerificationValue();\nif (verificationResult.isErr()) {\n  console.error("Verification failed:", verificationResult.data);\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Chain operations in logical order:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"await aqua\n  .notarize(file)     // First create genesis\n  .sign(...)          // Then sign\n  .witness(...)       // Then witness\n  .verify();          // Finally verify\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Handle errors appropriately:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'try {\n  await aqua\n    .notarize(file)\n    .sign(...);\n} catch (error) {\n  console.error("Operation failed:", error);\n  console.log("Logs:", aqua.getLogs());\n}\n'})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Use enableScalar when appropriate:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'await aqua\n  .notarize(file, { enableScalar: true })\n  .sign("metamask", credentials, true)\n  .witness("eth", "sepolia", "metamask", credentials, true);\n'})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Check verification results:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'const result = await aqua\n  .notarize(file)\n  .verify();\n\nconst verificationResult = result.getVerificationValue();\nif (verificationResult.isOk()) {\n  console.log("Verification successful");\n}\n'})}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);